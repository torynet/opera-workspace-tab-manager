name: Build Extension Package

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: |
          # Extract version without v prefix
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

          # Check if this is a pre-release (has hyphen after version)
          if [[ "${GITHUB_REF#refs/tags/v}" =~ ^[0-9]+\.[0-9]+\.[0-9]+-.*$ ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_ENV
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_ENV
          fi

      - name: Validate manifest.json
        run: |
          # Check if manifest.json exists and is valid JSON
          if ! jq . manifest.json > /dev/null 2>&1; then
            echo "Error: manifest.json is not valid JSON"
            exit 1
          fi

          # Check if version matches tag (ignoring pre-release suffix)
          MANIFEST_VERSION=$(jq -r .version manifest.json)
          TAG_BASE_VERSION=$(echo $VERSION | cut -d'-' -f1)
          if [ "$MANIFEST_VERSION" != "$TAG_BASE_VERSION" ]; then
            echo "Error: manifest.json version ($MANIFEST_VERSION) does not match tag version ($TAG_BASE_VERSION)"
            exit 1
          fi

      - name: Check required files
        run: |
          REQUIRED_FILES=("manifest.json" "popup.html" "popup.js" "background.js" "options.html" "options.js" "persona.ini")
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "Error: Required file $file is missing"
              exit 1
            fi
          done

          # Check if icons exist
          ICON_SIZES=("16" "48" "128")
          for size in "${ICON_SIZES[@]}"; do
            if [ ! -f "icons/icon${size}.png" ]; then
              echo "Error: Icon icons/icon${size}.png is missing"
              exit 1
            fi
          done

      - name: Create extension package
        run: |
          zip -r workspace-tab-manager-v$VERSION.zip . \
          -x "*.git*" \
          -x ".github/*" \
          -x ".editorconfig" \
          -x "PUBLISHING.md" \
          -x "*.md" \
          -x "metadata.json"

      - name: Create and upload release
        run: |
          PRERELEASE_FLAG=""
          if [ "$IS_PRERELEASE" = "true" ]; then
            PRERELEASE_FLAG="--prerelease"
          fi

          # Try to get release notes, use default message if not found
          RELEASE_NOTES=$(jq -r --arg ver "$TAG_BASE_VERSION" \
            'if .release_notes[$ver] then .release_notes[$ver].changes[] else empty end' \
            metadata.json 2>/dev/null | sed 's/^/- /' || echo "- Release version $VERSION")

          # Create release and upload asset
          gh release create ${{ github.ref_name }} \
            workspace-tab-manager-v$VERSION.zip \
            --title "Version $VERSION" \
            --notes "$RELEASE_NOTES" \
            $PRERELEASE_FLAG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
