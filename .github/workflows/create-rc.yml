name: Create Release Candidate

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      force_version:
        description: 'Force specific version (optional, format: x.y.z)'
        required: false
        type: string

jobs:
  create-rc:
    if: github.event.head_commit.committer.name != 'GitHub Actions'  # Skip commits made by workflows
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tags
          token: ${{ secrets.WORKFLOW_RECURSION_TOKEN }}

      - name: Debug trigger
        run: |
          echo "Triggered by: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref }}"

      - name: Determine next version
        id: version
        uses: ./.github/actions/version
        with:
          tag: ${{ github.ref }}  # Just pass the ref
          increment: rc
          force_version: ${{ inputs.force_version }}

      - name: Update manifest and persona version
        run: |
          VERSION="${{ steps.version.outputs.next_version }}"

          # Only update versions if this is first RC (rc1) of a new version
          if [[ "$VERSION" =~ -rc1$ ]]; then
            # Get base version without RC suffix
            BASE_VERSION=$(echo $VERSION | sed -E 's/-rc[0-9]+$//')

            # Update manifest.json version
            jq --arg ver "$BASE_VERSION" '.version = $ver' manifest.json > manifest.json.tmp
            mv manifest.json.tmp manifest.json

            # Update persona.ini versions
            sed -i -E 's/^Version=.*/Version='"$BASE_VERSION"'/' persona.ini
            sed -i -E '/^\[Opera\]/,/^\[/ s/^Version=.*/Version='"$BASE_VERSION"'/' persona.ini
          fi

      - name: Generate store release notes
        id: release_notes
        run: |
          # Get PRs since last release tag
          PREV_VERSION=$(git tag -l 'v*-r' --sort=-v:refname | head -n1)
          if [ -n "$PREV_VERSION" ]; then
            RELEASE_NOTES=$(gh pr list \
              --base main \
              --state merged \
              --search "merged:>=$(git log -1 --format=%aI $PREV_VERSION)" \
              --json title \
              --template '{{range .}}{{.title}}\n{{end}}')
          else
            RELEASE_NOTES="Initial release"
          fi

          # Save release notes for GitHub release
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Update metadata.json with new release notes
          jq --arg ver "$VERSION" --arg notes "$RELEASE_NOTES" \
            '.store.opera.release_notes.versions[$ver].en = $notes' \
            metadata.json > metadata.json.tmp
          mv metadata.json.tmp metadata.json

      - name: Commit version and release notes updates, create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_RECURSION_TOKEN }}
        run: |
          VERSION="${{ steps.version.outputs.next_version }}"

          # Check if we have any changes to commit
          if git status --porcelain; then
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git add -A
            git commit -m "chore: Version maintenance: Sync version and update release notes for $VERSION"
            git push origin HEAD
          else
            echo "No changes to commit"
          fi

          # Create tag on the current commit
          git tag -a "v$VERSION" -m "Release candidate v$VERSION"
          git push origin "v$VERSION"
